
class UnionFind:
    def __init__(self) -> None:
        self.size = {}
        self.parent = {}

    def addNode(self, node):
        if not node in self.parent:
            self.parent[node] = node
            self.size[node] = 1
    
    def findParent(self, node):
        if not self.parent[node]==node:
            self.parent[node] = self.findParent(self.parent[node])
        return self.parent[node]
    
    def union(self, node1, node2):
        parent1 = self.findParent(node1)
        parent2 = self.findParent(node2)
        if not parent1==parent2:
            if self.size[parent1]>self.size[parent2]:
                self.parent[parent2] = parent1
                self.size[parent1] += self.size[parent2]
            else:
                self.parent[parent1] = parent2
                self.size[parent2] += self.size[parent1]


class Solution:
    def minMalwareSpread(self, graph, initial):
        numNodes = len(graph)
        unionFind = UnionFind()
        initialSet = set(initial)
        
        for i in range(numNodes): unionFind.addNode(i)
        
        nonInfectedNodes = [node for node in range(numNodes) if node not in initialSet]
        for i in nonInfectedNodes:
            for j in nonInfectedNodes:
                if graph[i][j] and i!=j:
                    unionFind.union(i, j)
        # print(nonInfectedNodes, unionFind.parent, unionFind.size)
        infectedNodeToComponentParentsMap = {}
        componentParentsInfectedNodeLinkCounts = {}
        for infected in initial:
            infectedNodeToComponentParentsMap[infected] = set()
            for nonInfected in nonInfectedNodes:
                if graph[infected][nonInfected]:
                    parent = unionFind.findParent(nonInfected)
                    infectedNodeToComponentParentsMap[infected].add(parent)

            for parent in infectedNodeToComponentParentsMap[infected]:
                if not parent in componentParentsInfectedNodeLinkCounts:
                    componentParentsInfectedNodeLinkCounts[parent] = 0
                componentParentsInfectedNodeLinkCounts[parent] += 1

        # print(infectedNodeToComponentParentsMap, componentParentsInfectedNodeLinkCounts)
        maxSizeReduced, maxInfectingNodeNumber = -1, None
        for infected, parents in infectedNodeToComponentParentsMap.items():
            sizeReduced = 0
            for parent in parents:
                if componentParentsInfectedNodeLinkCounts[parent]==1:
                    sizeReduced += unionFind.size                                                                                                                                                                                                                                                                                                                                                     [parent]
            # print(sizeReduced)
            if sizeReduced>maxSizeReduced or (sizeReduced==maxSizeReduced and maxInfectingNodeNumber>infected):
                maxSizeReduced = sizeReduced
                maxInfectingNodeNumber = infected

        return maxInfectingNodeNumber
