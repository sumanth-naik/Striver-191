class Solution:
    def minMalwareSpread(self, graph, initial):

        adjList = [[] for i in range(len(graph))]
        for i in range(len(graph)):
            for j in range(len(graph)):
                if graph[i][j]:
                    adjList[i].append(j)
                    adjList[j].append(i)

        # def dfs(number, visited, excludedNum):
        #     visited.add(number)
        #     for neighbor, isNeighborConnected in enumerate(graph[number]):
        #         if isNeighborConnected and neighbor!=excludedNum and not neighbor in visited:
        #             dfs(neighbor, visited, excludedNum)

        def dfs(number, visited, excludedNum):
            visited.add(number)
            for neighbor in adjList[number]:
                if neighbor!=excludedNum and not neighbor in visited:
                    dfs(neighbor, visited, excludedNum)

        def getMalwareSpreadCountWithout(excludedNum):
            visited = set()
            for number in initial:
                if number!=excludedNum:
                    dfs(number, visited, excludedNum)
            return len(visited)


        minCount, minNum = 1e9, -1
        for num in initial:
            spreadCount = getMalwareSpreadCountWithout(num)
            if minCount > spreadCount:
                minCount = spreadCount
                minNum = num
        return minNum




class Solution:
    def minMalwareSpread(self, graph, initial):
        n = len(graph)
        lowPointArr = [-1 for i in range(n)]
        visited = set()
        cutVertexSet = set()
        # def tarjansAlgo(node, parent, depth):
        #     visited.add(node)
        #     lowPointArr[node] = depth
        #     childCount, isCutVertex = 0, False
        #     for neigh in range(n):
        #         if graph[node][neigh] and neigh not in visited:
        #             childCount += 1
        #             tarjansAlgo(neigh, parent, depth+1)
        #             if lowPointArr[neigh]>=depth:
        #                 isCutVertex = True
        #             lowPointArr[node] = min(lowPointArr[node], lowPointArr[neigh])
        #         # leaf nodes case
        #         elif graph[node][neigh] and neigh is not parent:
        #             lowPointArr[node] = min(depth, lowPointArr[neigh])
        #     if (isCutVertex and parent) or (not parent and childCount>1):
        #         cutVertexSet.add(node)

        initialSet = set(initial)
        minIndexNode, maxComponentSizeCutFromInfection = 1e9, -1
        def tarjansAlgoWithComponentSizesAndInfectedInfo(node, parent, depth):
            nonlocal minIndexNode, maxComponentSizeCutFromInfection
            infectingVerticesSet = set()
            nodesInComponent = set([node])
            visited.add(node)
            lowPointArr[node] = depth
            childCount, isCutVertex = 0, False
            nodesSaved = set()
            for neigh in range(n):
                if graph[node][neigh] and neigh not in visited:
                    childCount += 1
                    infectingVerticesSetOfChild, nodesInComponentOfChild = tarjansAlgoWithComponentSizesAndInfectedInfo(neigh, node, depth+1)
                    infectingVerticesSet = infectingVerticesSet.union(infectingVerticesSetOfChild)
                    nodesInComponent = nodesInComponent.union(nodesInComponentOfChild)
                    if lowPointArr[neigh]>=depth:
                        isCutVertex = True
                    lowPointArr[node] = min(lowPointArr[node], lowPointArr[neigh])
                    if infectingVerticesSetOfChild == set() or infectingVerticesSetOfChild ==set([node]):
                        nodesSaved = nodesSaved.union(nodesInComponentOfChild)
                # leaf nodes case
                elif graph[node][neigh] and neigh is not parent:
                    lowPointArr[node] = min(depth, lowPointArr[neigh])
                # connected, infected but already visited
                if graph[node][neigh] and neigh is not parent and neigh in initialSet:
                    infectingVerticesSet.add(neigh)
                
            print(node, parent, isCutVertex, infectingVerticesSet, nodesInComponent)
            print(set([node]))
            if ((isCutVertex and parent is not None) or (parent is None and childCount>1)) and node in initialSet and len(nodesSaved)>0:
                print(node)
                #infected, cut vertex and no infection other than this node in the component
                if len(nodesSaved)>maxComponentSizeCutFromInfection or (len(nodesSaved)==maxComponentSizeCutFromInfection and node<minIndexNode):
                    minIndexNode = node
                    maxComponentSizeCutFromInfection = len(nodesSaved)

            return infectingVerticesSet, nodesInComponent
        for infected in initial:
            if infected not in visited:
                tarjansAlgoWithComponentSizesAndInfectedInfo(infected, None, 0)
        return minIndexNode if minIndexNode!=1e9 else min(initial)